# This file must be used with "source bin/activate" *from bash*
# you cannot run it directly

deactivate () {
    # reset old environment variables
    if [ -n "${_OLD_VIRTUAL_PATH:-}" ] ; then
        PATH="${_OLD_VIRTUAL_PATH:-}"
        export PATH
        unset _OLD_VIRTUAL_PATH
    fi
    if [ -n "${_OLD_VIRTUAL_PYTHONHOME:-}" ] ; then
        PYTHONHOME="${_OLD_VIRTUAL_PYTHONHOME:-}"
        export PYTHONHOME
        unset _OLD_VIRTUAL_PYTHONHOME
    fi

    # This should detect bash and zsh, which have a hash command that must
    # be called to get it to forget past commands.  Without forgetting
    # past commands the $PATH changes we made may not be respected
    if [ -n "${BASH:-}" -o -n "${ZSH_VERSION:-}" ] ; then
        hash -r
    fi

    if [ -n "${_OLD_VIRTUAL_PS1:-}" ] ; then
        PS1="${_OLD_VIRTUAL_PS1:-}"
        export PS1
        unset _OLD_VIRTUAL_PS1
    fi

    unset VIRTUAL_ENV
    if [ ! "$1" = "nondestructive" ] ; then
    # Self destruct!
        unset -f deactivate
    fi
}

# unset irrelevant variables
deactivate nondestructive

# Determine VIRTUAL_ENV dynamically based on this script's location
# This script is at <venv>/bin/activate, so VIRTUAL_ENV is the parent directory
if [ -n "${BASH_SOURCE:-}" ]; then
    # Use BASH_SOURCE to get the script path
    VIRTUAL_ENV="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
else
    # Fallback for non-bash shells or when BASH_SOURCE is not available
    # Look for .venv_py3 directory that contains this activate script
    if [ -f ".venv_py3/bin/activate" ]; then
        VIRTUAL_ENV="$(pwd)/.venv_py3"
    elif [ -f "tools_src/myvnc/.venv_py3/bin/activate" ]; then
        VIRTUAL_ENV="$(pwd)/tools_src/myvnc/.venv_py3"
    elif [ -f "../.venv_py3/bin/activate" ]; then
        VIRTUAL_ENV="$(cd .. && pwd)/.venv_py3"
    else
        # Search up the directory tree
        _current="$(pwd)"
        _found=""
        while [ "$_current" != "/" ] && [ -z "$_found" ]; do
            if [ -f "$_current/.venv_py3/bin/activate" ]; then
                _found="$_current/.venv_py3"
                break
            fi
            _current="$(dirname "$_current")"
        done
        if [ -n "$_found" ]; then
            VIRTUAL_ENV="$_found"
        else
            # Last resort
            VIRTUAL_ENV="$(pwd)/.venv_py3"
        fi
    fi
fi
export VIRTUAL_ENV

_OLD_VIRTUAL_PATH="$PATH"
PATH="$VIRTUAL_ENV/bin:$PATH"
export PATH

# unset PYTHONHOME if set
# this will fail if PYTHONHOME is set to the empty string (which is bad anyway)
# could use `if (set -u; : $PYTHONHOME) ;` in bash
if [ -n "${PYTHONHOME:-}" ] ; then
    _OLD_VIRTUAL_PYTHONHOME="${PYTHONHOME:-}"
    unset PYTHONHOME
fi

if [ -z "${VIRTUAL_ENV_DISABLE_PROMPT:-}" ] ; then
    _OLD_VIRTUAL_PS1="${PS1:-}"
    if [ "x(.venv_py3) " != x ] ; then
	PS1="(.venv_py3) ${PS1:-}"
    else
    if [ "`basename \"$VIRTUAL_ENV\"`" = "__" ] ; then
        # special case for Aspen magic directories
        # see http://www.zetadev.com/software/aspen/
        PS1="[`basename \`dirname \"$VIRTUAL_ENV\"\``] $PS1"
    else
        PS1="(`basename \"$VIRTUAL_ENV\"`)$PS1"
    fi
    fi
    export PS1
fi

# This should detect bash and zsh, which have a hash command that must
# be called to get it to forget past commands.  Without forgetting
# past commands the $PATH changes we made may not be respected
if [ -n "${BASH:-}" -o -n "${ZSH_VERSION:-}" ] ; then
    hash -r
fi
